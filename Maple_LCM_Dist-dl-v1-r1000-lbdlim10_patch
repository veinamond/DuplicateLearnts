Binary files ./Maple_LCM_Dist/__MACOSX/bin/._starexec_run_default and ./Maple_LCM_Dist-dl-v1-r1000-lbdlim10/__MACOSX/bin/._starexec_run_default differ
Binary files ./Maple_LCM_Dist/__MACOSX/sources/._.DS_Store and ./Maple_LCM_Dist-dl-v1-r1000-lbdlim10/__MACOSX/sources/._.DS_Store differ
Binary files ./Maple_LCM_Dist/__MACOSX/._starexec_build and ./Maple_LCM_Dist-dl-v1-r1000-lbdlim10/__MACOSX/._starexec_build differ
Binary files ./Maple_LCM_Dist/sources/core/.DS_Store and ./Maple_LCM_Dist-dl-v1-r1000-lbdlim10/sources/core/.DS_Store differ
diff -ruN ./Maple_LCM_Dist/sources/core/Solver.cc ./Maple_LCM_Dist-dl-v1-r1000-lbdlim10/sources/core/Solver.cc
--- ./Maple_LCM_Dist/sources/core/Solver.cc	2017-09-15 07:01:40.000000000 +0800
+++ ./Maple_LCM_Dist-dl-v1-r1000-lbdlim10/sources/core/Solver.cc	2019-03-11 18:50:27.000000000 +0800
@@ -32,6 +32,8 @@
 #include "mtl/Sort.h"
 #include "core/Solver.h"
 
+
+
 using namespace Minisat;
 
 #ifdef BIN_DRUP
@@ -61,6 +63,11 @@
 static DoubleOption  opt_garbage_frac      (_cat, "gc-frac",     "The fraction of wasted memory allowed before a garbage collection is triggered",  0.20, DoubleRange(0, false, HUGE_VAL, false));
 
 
+static DoubleOption  opt_max_dupl_count    ("DUP-LIT", "dupl-count",  "[Currently disabled] specifies the maximum number of added dupl. learnts proportionately to nClauses, 0 = all of them", 0, DoubleRange(0, false, 1, true));
+static IntOption     opt_max_lbd_dup       ("DUP-LIT", "lbd-limit",  "specifies the maximum lbd of learnts to be screened for duplicates.", 10, IntRange(0, INT32_MAX));
+static IntOption     opt_min_dupl_app      ("DUP-LIT", "min-dup-app",  "specifies the minimum number of learnts to be included into db.", 2, IntRange(2, INT32_MAX));
+static IntOption     opt_gathering_time    ("DUP-LIT", "gather-time",  "specifies the time for gathering duplicate learnts (the number of restarts for repeatability).", 1000, IntRange(1, INT32_MAX));
+
 //=================================================================================================
 // Constructor/Destructor:
 
@@ -88,6 +95,11 @@
   , restart_first    (opt_restart_first)
   , restart_inc      (opt_restart_inc)
 
+  , min_number_of_learnts_copies(opt_min_dupl_app)
+  , max_number_of_duplicates_to_add(opt_max_dupl_count)
+  , max_lbd_dup(opt_max_lbd_dup)
+  , gathering_time(opt_gathering_time)
+
   // Parameters (the rest):
   //
   , learntsize_factor((double)1/(double)3), learntsize_inc(1.1)
@@ -614,7 +626,7 @@
                 assert(c.size() > 0);
                 afterSize = c.size();
                 
-                if(saved_size !=c.size()){
+                if(drup_file && (saved_size!=c.size())){
 
 #ifdef BIN_DRUP
                     binDRUP('a', c , drup_file);
@@ -740,7 +752,7 @@
                 assert(c.size() > 0);
                 afterSize = c.size();
                 
-                if(saved_size!=c.size()){
+                if(drup_file && (saved_size!=c.size())){
 
 #ifdef BIN_DRUP
                     binDRUP('a', c , drup_file);
@@ -788,7 +800,35 @@
                         c.set_lbd(nblevels);
                     }
 
-                    if (c.lbd() <= core_lbd_cut){
+                    //duplicate learnts 
+                    bool is_duplicate = false;                    
+                    if (gathering == true){                        
+                        std::vector<int> tmp;
+                        for (int i = 0; i < c.size(); i++)
+                            tmp.push_back((var(c[i]) + 1) * (-2 * sign(c[i]) + 1));
+                        sort(tmp.begin(),tmp.end());
+                        auto it = ht.find(tmp);
+                        if (it != ht.end())
+                        {
+                            if (it->second > 0){
+                                it->second++;
+                                if (it->second > min_number_of_learnts_copies){
+                                    is_duplicate = true;
+                                    it->second = -1;
+                                    duplicates_added++;
+                                }                            
+                            }
+                            else{
+                                //this should not happen 
+                            }
+                        }
+                        else {
+                            ht[tmp] = 1;
+                        }                    
+                    }
+                    //duplicate learnts 
+
+                    if ((c.lbd() <= core_lbd_cut)||(is_duplicate == true)){
                         cj--;
                         learnts_core.push(cr);
                         c.mark(CORE);
@@ -1772,7 +1812,36 @@
             }else{
                 CRef cr = ca.alloc(learnt_clause, true);
                 ca[cr].set_lbd(lbd);
-                if (lbd <= core_lbd_cut){
+
+                //duplicate learnts 
+                bool is_duplicate = false;
+                if ((gathering == true)&& (lbd <= max_lbd_dup)){                        
+                    std::vector<int> tmp;
+                    for (int i = 0; i < learnt_clause.size(); i++)
+                        tmp.push_back((var(learnt_clause[i]) + 1) * (-2 * sign(learnt_clause[i]) + 1));
+                    sort(tmp.begin(),tmp.end());
+                    auto it = ht.find(tmp);
+                    if (it != ht.end())
+                    {
+                        if (it->second > 0){
+                            it->second++;
+                            if (it->second > min_number_of_learnts_copies){
+                                is_duplicate = true;
+                                duplicates_added++;
+                                it->second = -1;
+                            }                            
+                        }
+                        else{
+                            //this should not happen 
+                        }
+                    }
+                    else {
+                        ht[tmp] = 1;
+                    }                    
+                }
+                //duplicate learnts
+
+                if ((lbd <= core_lbd_cut)|| (is_duplicate == true)){
                     learnts_core.push(cr);
                     ca[cr].mark(CORE);
                 }else if (lbd <= 6){
@@ -1948,10 +2017,21 @@
     while (status == l_Undef && init > 0 /*&& withinBudget()*/)
         status = search(init);
     VSIDS = false;
+    duplicates_added = 0;
+    gathering = true;
+
 
     // Search:
     int curr_restarts = 0;
     while (status == l_Undef /*&& withinBudget()*/){
+         if ((curr_restarts>=gathering_time)&(gathering == true)) {             
+            gathering = false;
+            if (duplicates_added >0) {
+                printf("c Duplicate learnts added %i \n",duplicates_added);            
+//                duplicates_added = 0;
+            }
+            ht.clear();       
+        }
         if (VSIDS){
             int weighted = INT32_MAX;
             status = search(weighted);
diff -ruN ./Maple_LCM_Dist/sources/core/Solver.h ./Maple_LCM_Dist-dl-v1-r1000-lbdlim10/sources/core/Solver.h
--- ./Maple_LCM_Dist/sources/core/Solver.h	2017-09-15 07:01:40.000000000 +0800
+++ ./Maple_LCM_Dist-dl-v1-r1000-lbdlim10/sources/core/Solver.h	2019-03-11 18:50:27.000000000 +0800
@@ -30,7 +30,7 @@
 #define Minisat_Solver_h
 
 #define ANTI_EXPLORATION
-#define BIN_DRUP
+//#define BIN_DRUP
 
 #define GLUCOSE23
 //#define INT_QUEUE_AVG
@@ -48,13 +48,34 @@
 #include "core/SolverTypes.h"
 
 
+// duplicate learnts version
+#include <vector>
+#include <unordered_map>
+#include <set>
+#include <map>
+#include <algorithm>
+// duplicate learnts version
+
 // Don't change the actual numbers.
 #define LOCAL 0
 #define TIER2 2
 #define CORE  3
 
 namespace Minisat {
+// duplicate learnts version
+struct VectorHash {
+	size_t operator()(const std::vector<int>& v) const {
+		std::hash<int> hasher;
+		size_t seed = v[0];
+		for (int i : v) {
+			seed ^= hasher(i) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
+		}
+		return seed;
+	}
+};
+typedef std::unordered_map<std::vector<int>, unsigned int, VectorHash> hashtable;
 
+// duplicate learnts version
 //=================================================================================================
 // Solver -- the main class:
 
@@ -188,11 +209,21 @@
     int       learntsize_adjust_start_confl;
     double    learntsize_adjust_inc;
 
+    // duplicate learnts version
+    int       min_number_of_learnts_copies;
+    double    max_number_of_duplicates_to_add;
+    int       gathering_time;
+    int       max_lbd_dup;
+    // duplicate learnts version
+
     // Statistics: (read-only member variable)
     //
     uint64_t solves, starts, decisions, rnd_decisions, propagations, conflicts, conflicts_VSIDS;
     uint64_t dec_vars, clauses_literals, learnts_literals, max_literals, tot_literals;
 
+// duplicate learnts version
+    uint64_t duplicates_added;
+
     vec<uint32_t> picked;
     vec<uint32_t> conflicted;
     vec<uint32_t> almost_conflicted;
@@ -266,6 +297,11 @@
 
     ClauseAllocator     ca;
 
+    // duplicate learnts version
+    bool                gathering;
+    hashtable           ht;
+    // duplicate learnts version
+
     // Temporaries (to reduce allocation overhead). Each variable is prefixed by the method in which it is
     // used, exept 'seen' wich is used in several places.
     //
Binary files ./Maple_LCM_Dist/sources/.DS_Store and ./Maple_LCM_Dist-dl-v1-r1000-lbdlim10/sources/.DS_Store differ
diff -ruN ./Maple_LCM_Dist/sources/simp/Main.cc ./Maple_LCM_Dist-dl-v1-r1000-lbdlim10/sources/simp/Main.cc
--- ./Maple_LCM_Dist/sources/simp/Main.cc	2017-09-15 07:01:40.000000000 +0800
+++ ./Maple_LCM_Dist-dl-v1-r1000-lbdlim10/sources/simp/Main.cc	2019-03-11 18:50:27.000000000 +0800
@@ -48,6 +48,7 @@
     double cpu_time = cpuTime();
     double mem_used = memUsedPeak();
     printf("c restarts              : %"PRIu64"\n", solver.starts);
+    printf("c duplicate learnts     : %"PRIu64"\n", solver.duplicates_added);
     printf("c conflicts             : %-12"PRIu64"   (%.0f /sec)\n", solver.conflicts   , solver.conflicts   /cpu_time);
     printf("c decisions             : %-12"PRIu64"   (%4.2f %% random) (%.0f /sec)\n", solver.decisions, (float)solver.rnd_decisions*100 / (float)solver.decisions, solver.decisions   /cpu_time);
     printf("c propagations          : %-12"PRIu64"   (%.0f /sec)\n", solver.propagations, solver.propagations/cpu_time);
diff -ruN ./Maple_LCM_Dist/starexec_build ./Maple_LCM_Dist-dl-v1-r1000-lbdlim10/starexec_build
--- ./Maple_LCM_Dist/starexec_build	2017-09-15 07:01:38.000000000 +0800
+++ ./Maple_LCM_Dist-dl-v1-r1000-lbdlim10/starexec_build	2019-03-11 18:50:27.000000000 +0800
@@ -1,6 +1,8 @@
 #!/bin/sh
 
 cd sources/simp
+make clean
 make rs
-cp glucose_static ../../bin/glucose_static
+cp glucose_static ../../bin/Maple_LCM_Dist-dl-v1-r1000-lbdlim10
+
 
