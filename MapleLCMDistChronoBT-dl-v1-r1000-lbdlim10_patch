diff -ruN ./MapleLCMDistChronoBT/sources/core/Solver.cc ./MapleLCMDistChronoBT-dl-v1-r1000-lbdlim10/sources/core/Solver.cc
--- ./MapleLCMDistChronoBT/sources/core/Solver.cc	2018-04-15 22:29:12.000000000 +0800
+++ ./MapleLCMDistChronoBT-dl-v1-r1000-lbdlim10/sources/core/Solver.cc	2019-03-11 18:50:27.000000000 +0800
@@ -66,6 +66,11 @@
 static IntOption     opt_chrono            (_cat, "chrono",  "Controls if to perform chrono backtrack", 100, IntRange(-1, INT32_MAX));
 static IntOption     opt_conf_to_chrono    (_cat, "confl-to-chrono",  "Controls number of conflicts to perform chrono backtrack", 4000, IntRange(-1, INT32_MAX));
 
+static DoubleOption  opt_max_dupl_count    ("DUP-LIT", "dupl-count",  "[Currently disabled] specifies the maximum number of added dupl. learnts proportionately to nClauses, 0 = all of them", 0, DoubleRange(0, false, 1, true));
+static IntOption     opt_max_lbd_dup       ("DUP-LIT", "lbd-limit",  "specifies the maximum lbd of learnts to be screened for duplicates.", 10, IntRange(0, INT32_MAX));
+static IntOption     opt_min_dupl_app      ("DUP-LIT", "min-dup-app",  "specifies the minimum number of learnts to be included into db.", 2, IntRange(2, INT32_MAX));
+static IntOption     opt_gathering_time    ("DUP-LIT", "gather-time",  "specifies the time for gathering duplicate learnts (the number of restarts for repeatability).", 1000, IntRange(1, INT32_MAX));
+
 
 //=================================================================================================
 // Constructor/Destructor:
@@ -94,6 +99,15 @@
   , restart_first    (opt_restart_first)
   , restart_inc      (opt_restart_inc)
 
+  , min_number_of_learnts_copies(opt_min_dupl_app)
+  , max_number_of_duplicates_to_add(opt_max_dupl_count)
+  , max_lbd_dup(opt_max_lbd_dup)
+  , gathering_time(opt_gathering_time)
+
+    // added dupls
+
+
+
   // Parameters (the rest):
   //
   , learntsize_factor((double)1/(double)3), learntsize_inc(1.1)
@@ -796,11 +810,40 @@
                         c.set_lbd(nblevels);
                     }
 
-                    if (c.lbd() <= core_lbd_cut){
+                        
+                    bool is_duplicate = false;
+                    //duplicate learnts 
+                    if (gathering == true){                        
+                        std::vector<int> tmp;
+                        for (int i = 0; i < c.size(); i++)
+                            tmp.push_back((var(c[i]) + 1) * (-2 * sign(c[i]) + 1));
+                        sort(tmp.begin(),tmp.end());
+                        auto it = ht.find(tmp);
+                        if (it != ht.end())
+                        {
+                            if (it->second > 0){
+                                it->second++;
+                                if (it->second > min_number_of_learnts_copies){
+                                    is_duplicate = true;
+                                    it->second = -1;
+                                    duplicates_added++;
+                                }                            
+                            }
+                            else{
+                                //this should not happen 
+                            }
+                        }
+                        else {
+                            ht[tmp] = 1;
+                        }                    
+                    }
+                            
+
+                    if ((c.lbd() <= core_lbd_cut)||(is_duplicate == true)){
                         cj--;
                         learnts_core.push(cr);
                         c.mark(CORE);
-                    }
+                    }                
 
                     c.setSimplified(true);
                 }
@@ -1909,19 +1952,52 @@
             }else{
                 CRef cr = ca.alloc(learnt_clause, true);
                 ca[cr].set_lbd(lbd);
-                if (lbd <= core_lbd_cut){
+                bool is_duplicate = false;
+                //duplicate learnts 
+                if ((gathering == true)&& (lbd <= max_lbd_dup)){                        
+                    std::vector<int> tmp;
+                    for (int i = 0; i < learnt_clause.size(); i++)
+                        tmp.push_back((var(learnt_clause[i]) + 1) * (-2 * sign(learnt_clause[i]) + 1));
+                    sort(tmp.begin(),tmp.end());
+                    auto it = ht.find(tmp);
+                    if (it != ht.end())
+                    {
+                        if (it->second > 0){
+                            it->second++;
+                            if (it->second > min_number_of_learnts_copies){
+                                is_duplicate = true;
+                                duplicates_added++;
+                                it->second = -1;
+                            }                            
+                        }
+                        else{
+                            //this should not happen 
+                        }
+                    }
+                    else {
+                        ht[tmp] = 1;
+                    }                    
+                }
+                //duplicate learnts
+
+                if ((lbd <= core_lbd_cut)|| (is_duplicate == true)){
                     learnts_core.push(cr);
                     ca[cr].mark(CORE);
-                }else if (lbd <= 6){
-                    learnts_tier2.push(cr);
-                    ca[cr].mark(TIER2);
-                    ca[cr].touched() = conflicts;
-                }else{
-                    learnts_local.push(cr);
-                    claBumpActivity(ca[cr]); }
+                }else
+                {
+                    if (lbd <= 6){
+                        learnts_tier2.push(cr);
+                        ca[cr].mark(TIER2);
+                        ca[cr].touched() = conflicts;
+                    }else{
+                        learnts_local.push(cr);
+                        claBumpActivity(ca[cr]); }
+                }
                 attachClause(cr);
 
                 uncheckedEnqueue(learnt_clause[0], backtrack_level, cr);
+
+                
 #ifdef PRINT_OUT
                 std::cout << "new " << ca[cr] << "\n";
                 std::cout << "ci " << learnt_clause[0] << " l " << backtrack_level << "\n";
@@ -2064,7 +2140,8 @@
 
 // NOTE: assumptions passed in member-variable 'assumptions'.
 lbool Solver::solve_()
-{
+{    
+    double solve_start = cpuTime();
     signal(SIGALRM, SIGALRM_switch);
     alarm(2500);
 
@@ -2094,9 +2171,25 @@
         status = search(init);
     VSIDS = false;
 
+    duplicates_added = 0;
+    gathering = true;
     // Search:
     int curr_restarts = 0;
     while (status == l_Undef /*&& withinBudget()*/){
+/*
+ min_number_of_learnts_copies(opt_min_dupl_app)
+  , max_number_of_duplicates_to_add(opt_max_dupl_count)
+  , gathering_time(opt_gathering_time)*/
+
+        if ((curr_restarts>=gathering_time)&(gathering == true)) {             
+            gathering = false;
+            if (duplicates_added >0) {
+                printf("c Duplicate learnts added %i \n",duplicates_added);            
+//                duplicates_added = 0;
+            }
+            ht.clear();       
+        }
+
         if (VSIDS){
             int weighted = INT32_MAX;
             status = search(weighted);
diff -ruN ./MapleLCMDistChronoBT/sources/core/Solver.h ./MapleLCMDistChronoBT-dl-v1-r1000-lbdlim10/sources/core/Solver.h
--- ./MapleLCMDistChronoBT/sources/core/Solver.h	2018-04-15 22:29:12.000000000 +0800
+++ ./MapleLCMDistChronoBT-dl-v1-r1000-lbdlim10/sources/core/Solver.h	2019-03-11 18:50:27.000000000 +0800
@@ -48,12 +48,36 @@
 #include "core/SolverTypes.h"
 
 
+// duplicate learnts version
+#include <vector>
+#include <unordered_map>
+#include <set>
+#include <map>
+#include <algorithm>
+#include "utils/System.h"
+// duplicate learnts version
+
+
 // Don't change the actual numbers.
 #define LOCAL 0
 #define TIER2 2
 #define CORE  3
 
 namespace Minisat {
+// duplicate learnts version
+struct VectorHash {
+	size_t operator()(const std::vector<int>& v) const {
+		std::hash<int> hasher;
+		size_t seed = v[0];
+		for (int i : v) {
+			seed ^= hasher(i) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
+		}
+		return seed;
+	}
+};
+typedef std::unordered_map<std::vector<int>, unsigned int, VectorHash> hashtable;
+
+// duplicate learnts version
 
 //=================================================================================================
 // Solver -- the main class:
@@ -188,11 +212,21 @@
     int       learntsize_adjust_start_confl;
     double    learntsize_adjust_inc;
 
+    // duplicate learnts version
+    int       min_number_of_learnts_copies;
+    double    max_number_of_duplicates_to_add;
+    int       gathering_time;
+    int       max_lbd_dup;
+    // duplicate learnts version
+
     // Statistics: (read-only member variable)
     //
     uint64_t solves, starts, decisions, rnd_decisions, propagations, conflicts, conflicts_VSIDS;
     uint64_t dec_vars, clauses_literals, learnts_literals, max_literals, tot_literals;
     uint64_t chrono_backtrack, non_chrono_backtrack;
+// duplicate learnts version
+    uint64_t duplicates_added;
+
 
     vec<uint32_t> picked;
     vec<uint32_t> conflicted;
@@ -281,6 +315,13 @@
     int 				confl_to_chrono;
     int 				chrono;
 
+    // duplicate learnts version
+
+    bool                gathering;
+    hashtable           ht;
+    // duplicate learnts version
+
+
     // Temporaries (to reduce allocation overhead). Each variable is prefixed by the method in which it is
     // used, exept 'seen' wich is used in several places.
     //
diff -ruN ./MapleLCMDistChronoBT/sources/simp/depend.mk ./MapleLCMDistChronoBT-dl-v1-r1000-lbdlim10/sources/simp/depend.mk
--- ./MapleLCMDistChronoBT/sources/simp/depend.mk	2018-04-15 22:29:14.000000000 +0800
+++ ./MapleLCMDistChronoBT-dl-v1-r1000-lbdlim10/sources/simp/depend.mk	1970-01-01 08:00:00.000000000 +0800
@@ -1,12 +0,0 @@
-/nfs/iil/proj/dt/prover01/work/vryvchin/OtherSolvers/Maple_LCM_Dist_chrono/sources/simp/SimpSolver.o /nfs/iil/proj/dt/prover01/work/vryvchin/OtherSolvers/Maple_LCM_Dist_chrono/sources/simp/SimpSolver.or /nfs/iil/proj/dt/prover01/work/vryvchin/OtherSolvers/Maple_LCM_Dist_chrono/sources/simp/SimpSolver.od /nfs/iil/proj/dt/prover01/work/vryvchin/OtherSolvers/Maple_LCM_Dist_chrono/sources/simp/SimpSolver.op: \
- /nfs/iil/proj/dt/prover01/work/vryvchin/OtherSolvers/Maple_LCM_Dist_chrono/sources/simp/SimpSolver.cc \
- ../mtl/Sort.h ../mtl/Vec.h ../mtl/IntTypes.h ../mtl/XAlloc.h \
- ../simp/SimpSolver.h ../mtl/Queue.h ../core/Solver.h ../mtl/Heap.h \
- ../mtl/Alg.h ../utils/Options.h ../utils/ParseUtils.h \
- ../core/SolverTypes.h ../mtl/Map.h ../mtl/Alloc.h ../utils/System.h
-/nfs/iil/proj/dt/prover01/work/vryvchin/OtherSolvers/Maple_LCM_Dist_chrono/sources/simp/Main.o /nfs/iil/proj/dt/prover01/work/vryvchin/OtherSolvers/Maple_LCM_Dist_chrono/sources/simp/Main.or /nfs/iil/proj/dt/prover01/work/vryvchin/OtherSolvers/Maple_LCM_Dist_chrono/sources/simp/Main.od /nfs/iil/proj/dt/prover01/work/vryvchin/OtherSolvers/Maple_LCM_Dist_chrono/sources/simp/Main.op: \
- /nfs/iil/proj/dt/prover01/work/vryvchin/OtherSolvers/Maple_LCM_Dist_chrono/sources/simp/Main.cc \
- ../utils/System.h ../mtl/IntTypes.h ../utils/ParseUtils.h \
- ../utils/Options.h ../mtl/Vec.h ../mtl/XAlloc.h ../core/Dimacs.h \
- ../core/SolverTypes.h ../mtl/Alg.h ../mtl/Map.h ../mtl/Alloc.h \
- ../simp/SimpSolver.h ../mtl/Queue.h ../core/Solver.h ../mtl/Heap.h
diff -ruN ./MapleLCMDistChronoBT/sources/simp/Main.cc ./MapleLCMDistChronoBT-dl-v1-r1000-lbdlim10/sources/simp/Main.cc
--- ./MapleLCMDistChronoBT/sources/simp/Main.cc	2018-04-15 22:29:14.000000000 +0800
+++ ./MapleLCMDistChronoBT-dl-v1-r1000-lbdlim10/sources/simp/Main.cc	2019-03-11 18:50:27.000000000 +0800
@@ -48,6 +48,7 @@
     double cpu_time = cpuTime();
     double mem_used = memUsedPeak();
     printf("c restarts              : %"PRIu64"\n", solver.starts);
+    printf("c duplicate learnts     : %"PRIu64"\n", solver.duplicates_added);
     printf("c conflicts             : %-12"PRIu64"   (%.0f /sec)\n", solver.conflicts   , solver.conflicts   /cpu_time);
     printf("c decisions             : %-12"PRIu64"   (%4.2f %% random) (%.0f /sec)\n", solver.decisions, (float)solver.rnd_decisions*100 / (float)solver.decisions, solver.decisions   /cpu_time);
     printf("c propagations          : %-12"PRIu64"   (%.0f /sec)\n", solver.propagations, solver.propagations/cpu_time);
diff -ruN ./MapleLCMDistChronoBT/starexec_build ./MapleLCMDistChronoBT-dl-v1-r1000-lbdlim10/starexec_build
--- ./MapleLCMDistChronoBT/starexec_build	2018-04-15 22:30:28.000000000 +0800
+++ ./MapleLCMDistChronoBT-dl-v1-r1000-lbdlim10/starexec_build	2019-03-11 18:50:27.000000000 +0800
@@ -1,6 +1,7 @@
 #!/bin/sh
 
 cd sources/simp
+make clean
 make rs
-cp glucose_static ../../bin/glucose_static
+cp glucose_static ../../bin/MapleLCMDistChronoBT-dl-v1-r1000-lbdlim10
 
